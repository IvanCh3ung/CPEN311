/* This following FSM allows for interaction and communication bwtn FSMs of Task 1, 2a, and 2b*/


module controller_fsm(
                input clk,
                input rst, 
                input doneTask1,
                input doneTask2a,
                input doneTask2b,
                
                output startTask1,
                output startTask2a,
                output startTask2b,
                output [5:0] state
);

parameter check_start_1         = 6'b0000_00 ;
parameter give_start_1          = 6'b0001_00; //one additional clock signal for waiting
parameter wait_for_finish_1     = 6'b0010_00;
parameter finished_1            = 6'b0011_01;

parameter check_start_2a        = 6'b0100_00;
parameter give_start_2a         = 6'b0101_00;
parameter wait_for_finish_2a    = 6'b0110_00;
parameter finished_2a           = 6'b0111_10;

parameter check_start_2b        = 6'b1000_00;
parameter give_start_2b         = 6'b1001_00;
parameter wait_for_finish_2b    = 6'b1010_00;
parameter finished_2b           = 6'b1011_00;

always @ (posedge clk, posedge rst) begin
    if (rst) state <= check_start_1;
    else begin
        case(state)
        check_start_1:                         state <= give_start_1;
        give_start_1:                          state <= wait_for_finish_1;
        wait_for_finish_1: if (doneTask1)      state <= finished_1;
                           else                state <= wait_for_finish_1;
        finished_1:                            state <= check_start_2a;

        check_start_2a:                        state <= give_start_2a;
        give_start_2a:                         state <= wait_for_finish_2a;
        wait_for_finish_2a: if(doneTask2a)     state <= finished_2a;
                             else              state <= wait_for_finish_2a;
        finished_2a:                           state <= check_start_2b;

        check_start_2b:                        state <= give_start_2b;
        give_start_2b:                         state <= wait_for_finish_2b;
        wait_for_finish_2b if(doneTask2b)      state <= finished_2b;
        finished_2b:                           state <= finished_2b;
        default:                               state <= check_start_1;
        endcase
    end 
end


always @(*) begin
    startTask1 = 1'b1;
    startTask2a = state[0];
    startTask2b = state[1];
end

endmodule


// module controller_fsm(
//                      input clk,
//                      input rst,
//                      input start_request_1,
//                      input start_request_2a,
//                      input start_request_2b,
//                      input fsmDone,
//                      input [7:0] read_data,
//                      input [7:0] arguments_1,
//                      input [7:0] arguments_2a,
//                      input [7:0] arguments_2b,

//                      output done_1,
//                      output doneTask2a,
//                      output doneTask2b,
//                      output reset_start_request_1;
//                      output reset_start_request_2a;
//                      output reset_start_request_2b;
//                      output startFsm,
//                      output [7:0] arguments_output
//                      output [7:0] received_data_1,
//                      output [7:0] received_data_2a,
//                      output [7:0] received_data_2b
//                      output [11:0] state
// );

// /*reg definitions*/
// reg select_2a_output_parameter;
// reg select_2b_output_parameter;
// reg register_data1_enable;
// reg register_data2a_enable;
// reg register_data2b_enable;

// /* State declarations */
// parameter check_start_1         = 12'b0000_0000_0000;
// parameter give_start_1          = 12'b0000_0000_1100;
// parameter wait_for_finish_1     = 12'b1000_0000_0000;
// //parameter register_data_1       = 12'b0001_0000_0000;
// parameter give_finish_1         = 12'b0000_0010_0000;

// parameter check_start_2a        = 12'b0000_0000_0001;
// parameter give_start_2a         = 12'b0000_0001_0101;
// parameter wait_for_finish_2a    = 12'b1000_0000_0001;
// //parameter register_data_2a      = 12'b0010_0000_0001;
// parameter give_finish_2a        = 12'b0000_0100_0001;

// parameter check_start_2b        = 12'b0000_0000_0010;
// parameter give_start_2b         = 12'b0000_0010_0110;
// parameter wait_for_finish_2b    = 12'b1000_0000_0010;
// //parameter register_data_2b      = 12'b0100_0000_0010;
// parameter give_finish_2b        = 12'b0000_1000_0010;

// /*State logic*/
// always @(posedge clk, posedge reset) begin
//     if (reset) state <= check_start_1;
//     else begin
//         case(state)
//         check_start_1:          if (start_request_1)     state <= give_start_1;
//                                 else                     state <= check_start_1;
//         give_start_1:                                   state <= wait_for_finish_1;
//         wait_for_finish_1:      if(fsmDone)              state <= register_data_1;
//                                 else                     state <= wait_for_finish_1;             
//         register_data_1:                                 state <= give_finish_1;   
//         give_finish_1:                                   state <= check_start_2;

//         check_start_2a:         if (start_request_2a)    state <= give_start_2a;
//                                 else                     state <= check_start_2a;
//         give_start_2a:                                   state <= wait_for_finish_2a;
//         wait_for_finish_2a:     if(fsmDone)              state <= register_data_2a;
//                                 else                     state <= wait_for_finish_2a;
//         register_data_2a:                                state <= give_finish_2a;
//         give_finish_2a:                                  state <= check_start_2b;

//         check_start_2b:         if (start_request_2b)    state <= give_finish_2b;
//                                 else                     state <= check_start_2b;
//         give_start_2b:                                   state <= wait_for_finish_2b;
//         wait_for_finish_2b:     if (fsmDone)             state <= register_data_2b;
//                                 else                     state <= wait_for_finish_2b;
//         register_data_2b:                                state <= give_finish_2b;
//         give_finish_2b:                                  state <= give_finish_2b;
        
//         default: state <= check_start_1;
        
//         endcase
//     end
// end
// always @(*) begin
//     select_2a_output_parameter  = state[0];
//     select_2b_output_parameter  = state[1];
//     startFsm                    = state[2];
//     reset_start_request_1       = state[3];
//     reset_start_request_2a      = state[4];
//     reset_start_request_2b      = state[5];
//     done_1                      = state[6];
//     doneTask2a                     = state[7];
//     doneTask2b                     = state[8];
//     register_data1_enable       = state[9];
//     register_data2a_enable      = state[10];
//     register_data2b_enable      = state[11];    
// end

// always @(*) begin
//     if ((!select_2a_output_parameter) && 
//         (!select_2b_output_parameter))
//         arguments_output = arguments_1;

//     else if ((select_2a_output_parameter) && 
//              (!select_2b_output_parameter))
//             arguments_output = argument_2a;

//     else if ((!select_2a_output_parameter) && 
//             (select_2b_output_parameter))
//         arguments_output = argument_2b;
        
//     else
//         arguments_output = argument_output;
// end

// always @(posedge clk)begin
//     if (register_data1_enable)
//         received_data_1 <= read_data;
// end

// always @(posedge clk)begin
//     if (register_data2a_enable)
//         received_data_2a <= read_data; 
// end

// always @(posedge clk)begin
//     if (register_data2b_enable)
//         received_data_2b <= read_data;
// end

endmodule