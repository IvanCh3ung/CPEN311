// for i = 0 to 255 {
// s[i] = i; - what they want
// i = i+i - what ur code is saying
// }

module task1_init_mem (
    input clk,
    input rst,
    input start,
    output reg [7:0] task1_init_data,
    output doIncrement,
    output doneFsm1,
    output [3:0] state
);

    reg [7:0] i = 8'b0;

    /* State Declarations*/
    parameter idle      = 4'b00_00;
    parameter increment = 4'b01_10;
    parameter done      = 4'b10_01;

    //State logic
    always @(posedge clk, posedge rst) begin
        if (rst) state <= idle;
        else begin
            case (state)
                idle:       if (start)     state <= increment;
                            else           state <= idle;

                increment:  if (i < 256)   state <= increment;
                            else           state <= done;

                done:                      state <= done;
                default:                   state <= idle
            endcase    
        end
    end

    //Output logic
    always @ (*) begin
        doneFsm1    =  state[0];
        doIncrement =  state[1];    
    end

    //Output logic
    always @ (posedge clk) begin
        if (doIncrement) task1_init_data <= task1_init_data + 1;
    end

    // always @(posedge clk) begin
    //     for (i = 0; i < 256; i = i + 1) begin
    //         task1_init_data <= task1_init_data + i;
    //     end
    // end

endmodule